#!/bin/bash
# Copyright megabaks
# Distributed under the terms of the GNU General Public License v3 or later
############################################################################
################ check_openrc ##############################################
[[ -f "/etc/init.d/functions.sh" ]] && . /etc/init.d/functions.sh
############################################################################
################ colors ####################################################
green="\033[01;32m"
red="\033[01;31m"
restore="\033[00m"
############################################################################
################ usage #####################################################
usage(){
	echo "Usage"
	echo "mask atom"
	echo "i.e.:"
	echo -e "${green}mask media-sound/deadbeef${restore}"
	echo "atom ---> \${CATEGORY}/\${PN} or \${PN}"
}
############################################################################
################ find_category #############################################
find_category(){
	[[ -f "/etc/make.conf" ]] && source "/etc/make.conf" 2>/dev/null
	[[ -f "${PORT_ETC}/make.conf" ]] && source "${PORT_ETC}/make.conf" 2>/dev/null
	[[ -z "${PORTDIR}" ]] && PORTDIR="/usr/portage"
	if [[ -n "$(eix -V 2>/dev/null)" ]];then
		PORTDIR_OVERLAY="$(eix --print PORTDIR_OVERLAY)"
	else
		export "$(grep "^PORTDIR_OVERLAY=" <<< "$(emerge --info 2>/dev/null)" | tr -d \")"
	fi
	for target in ${PORTDIR} ${PORTDIR_OVERLAY};do
		categories+="$(ls -d1 ${target}/{*-*,virtual} 2>/dev/null)"$'\n'
	done
	categories="$(sed '/^$/d' <<< "${categories}" 2>/dev/null | sort -u)"
	while read line;do
		if [[ -d "${line}/${atom}" ]];then
			category+="${line##*/}"$'\n'
		fi
	done <<< "${categories}"
	echo "${category}"
}
############################################################################
################ env #######################################################
PORT_ETC="/etc/portage"
atom="${1}"
if [[ -n "${1}" ]];then
	if ! grep -q '/' <<< "${atom}";then
		category="$(find_category)"
		if [[ "$(wc -l <<< "${category}")" != "1" ]];then
			echo -e "${green}choose one of${restore}:"
			for i in ${category};do
				echo "${i}/${atom}"
			done
			exit 0
		fi
	elif grep -q "*/.*" <<< "${atom}";then
		category="*"
	elif grep -q \* <<< "${atom}";then
		category="${atom%%/\*}"
	else
		category="${atom%%/*}"
	fi
	atom="${category}/${atom##*/}"
fi
############################################################################
################ file or dir... ############################################
file_or_dir(){
	founded="$(ls -d1 ${PORT_ETC}/${1} 2>/dev/null)"
	if [[ -z "${founded}" ]];then
		founded="${PORT_ETC}/${1}"
		touch "${founded}"
	fi
	for target in ${founded};do
		if [[ -f "${target}" ]];then
			file="${target}"
			${2};${3};${4};
		elif [[ -d "${target}" ]];then
			for f in `find ${target} -type f \! -name '*~' \! -name '*.bak'` i_like_you_my_little_gentoo;do
				if grep -q -m1 "${atom//\*/\\*}[[:space:]]" "${file}";then
					file="${f}"
					${2};${3};${4};
				else
					if [[ "${f}" == "i_like_you_my_little_gentoo" ]];then
						file="${PORT_ETC}/${category}"
						${2};${3};${4};
					fi
				fi
			done
		fi
	done
}
############################################################################
################ strip_atom ################################################
strip_atom(){
	local switcher full_version revision slot version atom category pn
	switcher="$(grep -o "[<>=~]" <<< "${1}" | tr -d $'\n')"
	full_version="$(grep -o "\-[[:digit:]].*" <<< "${1}"| sed 's|^-||')"
	[[ -n "${full_version}" ]] && revision="$(grep -o "\-r[[:digit:]].*" <<< "${full_version}" | sed 's|:.*||')"
	[[ "${1}" == *:* ]] && slot="${1#*:}"
	[[ "${slot}" == :* ]] && unset slot
	[[ "${1}" == *::* ]] && repo="${1#*::}"

	[[ -n "${revision}" ]] && version="${full_version/${revision}/}" || version="${full_version}"
	version="${version/%::${repo}/}"
	version="${version/%:${slot}/}"

	atom="$(tr -d '<>=~' <<< "${1}")"
	atom="${atom/%::${repo}/}"
	atom="${atom/%:${slot}/}"
	atom="${atom/%${revision}/}"
	atom="${atom/%-${version}/}"

	category="${atom%/*}"
	pn="${atom#*/}"

	echo "${switcher:-none} ${category:-none} ${pn:-none} ${version:-none} ${revision:-none} ${slot:-none} ${repo:-none}"
}
############################################################################
################ ver_sort ##################################################
ver_sort(){
	# 0 >>> "${1}" = "${2}"
	# 1 >>> "${1}" > "${2}"
	# 2 >>> "${2}" > "${1}"
	# alpha < beta
	# beta < pre
	# pre < rc
	# rc < p
	# none  < p
	alpha="0.1."
	beta="0.2."
	pre="0.3."
	rc="0.4."
	p="1.5."
	x="1.0"

	[[ "${1}" == "${2}" ]] && echo "0" && return 0

	f_ver="${1}"
	s_ver="${2}"
	f_striped="${f_ver%_*}"
	s_striped="${s_ver%_*}"
	f_test="${f_ver#${f_striped}_}" && [[ "${f_test}" == "${f_ver}" ]] && unset f_test
	s_test="${s_ver#${s_striped}_}" && [[ "${s_test}" == "${s_ver}" ]] && unset s_test

	if [[ "${f_striped}" != "${s_striped}" ]];then
		biggest="$(echo -e "${f_striped}\n${s_striped}" | sort -t '.' -k 1,1 | tail -n1)"
		[[ "${biggest}" == "${f_striped}" ]] && echo "1" || echo "2"
		return 0
	elif [[ "${f_test}" != "${s_test}" ]];then
		for i in alpha beta pre rc p;do
			f_test="${f_test/${i}/$(eval echo \$${i})}"
			s_test="${s_test/${i}/$(eval echo \$${i})}"
		done
		f_test="${f_test:-${x}}"
		s_test="${s_test:-${x}}"
		biggest="$(echo -e "${f_test}\n${s_test}" | sort -t '.' -k 1,1 | tail -n1)"
		[[ "${biggest}" == "${f_test}" ]] && echo "1" || echo "2"
		return 0
	fi
}
############################################################################
################ masked ####################################################
masked(){
	profile() {
		[[ -f "${1}/package.mask" ]] && MASKED+="$(grep -v -e "#" -e "^$" "${1}/package.mask")"$'\n'
		if [[ -f "${1}/parent" ]]; then
			for path in $(cat "${1}/parent");do
				profile "${1}/${path}"
			done
		fi
	}
	[[ -f "/usr/portage/profiles/package.mask" ]] && MASKED="$(grep -v -e "#" -e "^$" "/usr/portage/profiles/package.mask")"
	[[ -h "/etc/make.profile" ]] && profile "$(readlink -f /etc/make.profile)"
	[[ -h "/etc/portage/make.profile" ]] && profile "$(readlink -f /etc/portage/make.profile)"
	MASKED="$(sort -u <<< "${MASKED}")"
	export MASKED="${MASKED#$'\n'}"
}
############################################################################
################ nothing ###################################################
nothing(){
	echo -e "${green}no changes${restore}"
	eend 0 2>/dev/null
	exit 0
}
############################################################################
################ sort_uses #################################################
mask(){
	read a_sw a_cat a_pn a_ver a_rev a_slot a_repo <<< "$(strip_atom "${atom}")"
	pkg="${a_cat}/${a_pn}"
	
	entry="$(grep -e "^${pkg//\*/\\*}$" -e "[<>=~]${pkg//\*/\\*}[-:]" -e "^${pkg//\*/\\*}[-:]" "${file}" | tail -n1)"
	[[ -n "${entry}" ]] && read e_sw e_cat e_pn e_ver e_rev e_slot e_repo <<< "$(strip_atom "${entry}")"
	
	grep -q \# <<< "${entry}" && comment="$(cut -d\# -f2- <<< "${entry}")"
	[[ "x${entry}" == "x${atom}" ]] && nothing

	masked
	global_masked="$(grep -e "[<>=~]${a_cat}/${a_pn}" -e "^${a_cat}/${a_pn}$" <<< "${MASKED}")"
	[[ "x${entry}" == "x${global_masked}" ]] && nothing

	[[ -n "${global_masked}" ]] && read g_sw g_cat g_pn g_ver g_rev g_slot g_repo <<< "$(strip_atom "${global_masked}")"
# 	if [[ -n "${comment}" ]];then
# 		[[ "x${entry}" == "x${atom} ${uses} #${comment}" ]] && nothing
# 		if [[ -z "${entry}" ]];then
# 			echo -e "new:${green} ${atom} ${uses} #${comment}${restore}"
# 			echo "${atom} ${uses} #${comment}" >> "${file}"
# 			eend $? 2>/dev/null
# 		else
# 			echo -e "old:${red} ${entry}${restore}"
# 			echo -e "new:${green} ${atom} ${uses} #${comment}${restore}"
# 			sed  "s|${entry//\*/\\*}|${atom} ${uses} #${comment}|" -i "${file}"
# 			eend $? 2>/dev/null
# 		fi
# 	else
# 		[[ "x${entry}" == "x${atom} ${uses}" ]] && nothing
# 		if [[ -z "${entry}" ]];then
# 			echo -e "new:${green} ${atom} ${uses}${restore}"
# 			echo "${atom} ${uses}" >> "${file}"
# 			eend $? 2>/dev/null
# 		else
# 			echo -e "old:${red} ${entry}${restore}"
# 			echo -e "new:${green} ${atom} ${uses}${restore}"
# 			sed  "s|${entry//\*/\\*}|${atom} ${uses}|" -i "${file}"
# 			eend $? 2>/dev/null
# 		fi
# 	fi
	unset atom comment ${!a_*} ${!g_*} ${!e_*}
} 2>/dev/null
############################################################################
################ package.mask ###############################################
atom_mask(){
	file_or_dir "package.mask" "set -f" "mask" "set +f" || return 1
}
############################################################################
################ run #######################################################
[[ -z "${1}" ]] && usage && exit 1
atom_mask;

#!/bin/bash
# Copyright megabaks
# Distributed under the terms of the GNU General Public License v3 or later
############################################################################
################ portage functions #########################################
source /usr/lib*/portage/bin/isolated-functions.sh
############################################################################
################ colors ####################################################
green="\033[01;32m"
red="\033[01;31m"
restore="\033[00m"
bg_green="\033[0;42;2;30m"
bg_red="\033[0;41;3;37m"
############################################################################
################ usage #####################################################
usage(){
	echo "Usage"
	echo "DEFINE:"
	echo "use atom use(s)"
	echo "i.e.:"
	echo -e "${green}use media-sound/deadbeef supereq${restore}"
	echo "or"
	echo -e "${green}use deadbeef supereq${restore}"
	echo "REMOVE:"
	echo "use atom use(s) !"
	echo "i.e.:"
	echo -e "${green}use media-sound/deadbeef m3u !${restore}"
	echo "atom ---> \${CATEGORY}/\${PN} or \${PN}"
}
############################################################################
################ find_category #############################################
find_category(){
	[[ -f "/etc/make.conf" ]] && source "/etc/make.conf" 2>/dev/null
	[[ -f "${PORT_ETC}/make.conf" ]] && source "${PORT_ETC}/make.conf" 2>/dev/null
	PORTDIR="${PORTDIR:-/usr/portage}"
	if [[ -n "$(eix -V 2>/dev/null)" ]];then
		PORTDIR_OVERLAY="$(eix --print PORTDIR_OVERLAY)"
	else
		export "$(grep "^PORTDIR_OVERLAY=" <<< "$(emerge --info 2>/dev/null)" | tr -d \")"
	fi
	for target in ${PORTDIR} ${PORTDIR_OVERLAY};do
		categories+="$(ls -d1 ${target}/{*-*,virtual} 2>/dev/null)"$'\n'
	done
	categories="$(sed '/^$/d' <<< "${categories}" 2>/dev/null | sort -u)"
	while read line;do
		if [[ -d "${line}/${atom}" ]];then
			category+="${line##*/}"$'\n'
		fi
	done <<< "${categories}"
	echo "${category}"
}
############################################################################
################ env #######################################################
PORT_ETC="/etc/portage"
atom="${1}"
passed_uses="${@#${1//\*/\\*}}"
if [[ -n "${2}" ]];then
	if ! grep -q '/' <<< "${atom}";then
		category="$(find_category)"
		if [[ "$(wc -l <<< "${category}")" != "1" ]];then
			echo -e "${green}choose one of${restore}:"
			for i in ${category};do
				echo "${i}/${atom}"
			done
			exit 0
		fi
	elif grep -q "*/.*" <<< "${atom}";then
		category="*"
	elif grep -q \* <<< "${atom}";then
		category="${atom%%/\*}"
	else
		category="${atom%%/*}"
	fi
	atom="${category}/${atom##*/}"
fi
############################################################################
################ file or dir... ############################################
file_or_dir(){
	founded="$(ls -d1 ${PORT_ETC}/${1} 2>/dev/null)"
	if [[ -z "${founded}" ]];then
		founded="${PORT_ETC}/${1}"
		touch "${founded}"
	fi
	for target in ${founded};do
		if [[ -f "${target}" ]];then
			file="${target}"
			${2};${3};${4};
		elif [[ -d "${target}" ]];then
			for f in `find ${target} -type f \! -name '*~' \! -name '*.bak'` i_like_you_my_little_gentoo;do
				if grep -q -m1 "${atom//\*/\\*}[[:space:]]" "${file}";then
					file="${f}"
					${2};${3};${4};
				else
					if [[ "${f}" == "i_like_you_my_little_gentoo" ]];then
						file="${PORT_ETC}/${category}"
						${2};${3};${4};
					fi
				fi
			done
		fi
	done
}
############################################################################
################ sort_passed_uses ##########################################
sort_passed_uses(){
	for opt in ${1};do
		opt="${opt//\*/\\*}"
		uses="$(tr "[:space:]" $'\n' <<< ${uses} | grep -v -e "^${opt#-}$" -e "^\-${opt#-}$" | tr $'\n' " ")"
		uses+=" $(tr "[:space:]" $'\n' <<< ${1} | grep -e "^${opt#-}$" -e "^\-${opt#-}$" | tail -n1)"
		unset opt
	done
	echo ${uses} | tr ' ' $'\n' | sort
	unset uses
}
############################################################################
################ nothing ###################################################
nothing(){
	echo -e "${green}no changes${restore}"
	eend 0 2>/dev/null
	exit 0
}
############################################################################
################ remove ####################################################
remove(){
	defined="$(tr ' ' $'\n' <<< "${1}")"
	for trash in ${2};do
		defined="$(grep -v -e "^${trash#-}$" -e "^\-${trash#-}$" <<< "${defined}")"
	done
	echo ${defined}
}
############################################################################
################ sort_uses #################################################
sort_uses(){
	entry="$(grep "${atom//\*/\\*}[[:space:]]" "${file}" | tail -n1)"
	grep -q \# <<< "${entry}" && comment="$(cut -d\# -f2- <<< "${entry}")"

	if [[ -n "${entry}" ]];then
		for option in \
			"$(grep "^${atom//\*/\\*}[[:space:]]" ${file} | sed -e "s|${atom//\*/\\*} ||" -e "s|#.*${comment}||" | tr "[:space:]" $'\n' | uniq | tr $'\n' " ")";do
			atom_opts+="${option}"
		done
	fi
	if [[ -n "${remove}" ]];then
		uses="$(remove "${atom_opts}" "${passed_uses}")"
	else
		uses="$(sort_passed_uses "${atom_opts} ${passed_uses}")"
	fi
	uses="$(sed -e "s|^- | |g" -e "s| -- ||g" -e "s| - | |g" <<< ${uses})"
	##### colors
	old_uses="${atom_opts}"
	new_uses="${uses}"
	tmp_new_uses="$(tr ' ' $'\n' <<< "${new_uses}")"
	[[ -n "${old_uses}" ]] && tmp_old_uses="$(tr ' ' $'\n' <<< "${old_uses}")"
	for use in ${old_uses};do
		if ! grep -q "^${use}$" <<< "${tmp_new_uses}";then
			old_uses="${old_uses/${use}/${bg_red}${use}${restore}${red}}"
		fi
	done
	if [[ -n "${tmp_old_uses}" ]];then
		for use in ${new_uses};do
			if ! grep -q "^${use}$" <<< "${tmp_old_uses}";then
				new_uses="${new_uses/${use}/${bg_green}${use}${restore}${green}}"
			fi
		done
	fi
	##### /colors
	if [[ -n "${comment}" ]];then
		[[ "x${entry}" == "x${atom} ${uses} #${comment}" ]] && nothing
		if [[ -z "${entry}" ]];then
			echo -e "new:${green} ${atom} ${new_uses} #${comment}${restore}"
			echo "${atom} ${uses} #${comment}" >> "${file}"
			eend $? 2>/dev/null
		else
			echo -e "old:${red} ${atom} ${old_uses} #${comment}${restore}"
			echo -e "new:${green} ${atom} ${new_uses} #${comment}${restore}"
			sed  "s|${entry//\*/\\*}|${atom} ${uses} #${comment}|" -i "${file}"
			eend $? 2>/dev/null
		fi
	else
		[[ "x${entry}" == "x${atom} ${uses}" ]] && nothing
		if [[ -z "${entry}" ]];then
			echo -e "new:${green} ${atom} ${new_uses}${restore}"
			echo "${atom} ${uses}" >> "${file}"
			eend $? 2>/dev/null
		else
			echo -e "old:${red} ${atom} ${old_uses}${restore}"
			echo -e "new:${green} ${atom} ${new_uses}${restore}"
			sed  "s|${entry//\*/\\*}|${atom} ${uses}|" -i "${file}"
			eend $? 2>/dev/null
		fi
	fi
	unset atom atom_opts option options uses comment
} 2>/dev/null
############################################################################
################ package.use ###############################################
atom_use(){
	file_or_dir "package.use" "set -f" "sort_uses" "set +f" || return 1
}
############################################################################
################ run #######################################################
[[ -z "${2}" ]] && usage && exit 1
##### remove
grep -q \! <<< "${passed_uses}" && remove="true"
##### /remove
atom_use;
